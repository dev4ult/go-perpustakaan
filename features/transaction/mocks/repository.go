// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	member "perpustakaan/features/member"
	dtos "perpustakaan/features/transaction/dtos"

	mock "github.com/stretchr/testify/mock"

	transaction "perpustakaan/features/transaction"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteByID provides a mock function with given fields: transactionID
func (_m *Repository) DeleteByID(transactionID int) (int, error) {
	ret := _m.Called(transactionID)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int, error)); ok {
		return rf(transactionID)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(transactionID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionStatusByOrderID provides a mock function with given fields: orderID
func (_m *Repository) GetTransactionStatusByOrderID(orderID string) (string, error) {
	ret := _m.Called(orderID)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(orderID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(orderID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: newTransaction
func (_m *Repository) Insert(newTransaction transaction.Transaction) (int, error) {
	ret := _m.Called(newTransaction)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction) (int, error)); ok {
		return rf(newTransaction)
	}
	if rf, ok := ret.Get(0).(func(transaction.Transaction) int); ok {
		r0 = rf(newTransaction)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(transaction.Transaction) error); ok {
		r1 = rf(newTransaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Paginate provides a mock function with given fields: page, size
func (_m *Repository) Paginate(page int, size int) ([]transaction.Transaction, error) {
	ret := _m.Called(page, size)

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]transaction.Transaction, error)); ok {
		return rf(page, size)
	}
	if rf, ok := ret.Get(0).(func(int, int) []transaction.Transaction); ok {
		r0 = rf(page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllFineItemOnMemberID provides a mock function with given fields: memberID
func (_m *Repository) SelectAllFineItemOnMemberID(memberID int) ([]dtos.FineItem, error) {
	ret := _m.Called(memberID)

	var r0 []dtos.FineItem
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]dtos.FineItem, error)); ok {
		return rf(memberID)
	}
	if rf, ok := ret.Get(0).(func(int) []dtos.FineItem); ok {
		r0 = rf(memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.FineItem)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(memberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllFineItemOnTransactionID provides a mock function with given fields: TransactionID
func (_m *Repository) SelectAllFineItemOnTransactionID(TransactionID int) ([]dtos.FineItem, error) {
	ret := _m.Called(TransactionID)

	var r0 []dtos.FineItem
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]dtos.FineItem, error)); ok {
		return rf(TransactionID)
	}
	if rf, ok := ret.Get(0).(func(int) []dtos.FineItem); ok {
		r0 = rf(TransactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.FineItem)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(TransactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByID provides a mock function with given fields: transactionID
func (_m *Repository) SelectByID(transactionID int) (*transaction.Transaction, error) {
	ret := _m.Called(transactionID)

	var r0 *transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*transaction.Transaction, error)); ok {
		return rf(transactionID)
	}
	if rf, ok := ret.Get(0).(func(int) *transaction.Transaction); ok {
		r0 = rf(transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectFineItemByIDAndMemberID provides a mock function with given fields: fineItemID, memberID
func (_m *Repository) SelectFineItemByIDAndMemberID(fineItemID int, memberID int) (*dtos.FineItem, error) {
	ret := _m.Called(fineItemID, memberID)

	var r0 *dtos.FineItem
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*dtos.FineItem, error)); ok {
		return rf(fineItemID, memberID)
	}
	if rf, ok := ret.Get(0).(func(int, int) *dtos.FineItem); ok {
		r0 = rf(fineItemID, memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.FineItem)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(fineItemID, memberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectMemberByID provides a mock function with given fields: memberID
func (_m *Repository) SelectMemberByID(memberID int) (*member.Member, error) {
	ret := _m.Called(memberID)

	var r0 *member.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*member.Member, error)); ok {
		return rf(memberID)
	}
	if rf, ok := ret.Get(0).(func(int) *member.Member); ok {
		r0 = rf(memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(memberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectTransactionByOrderID provides a mock function with given fields: orderID
func (_m *Repository) SelectTransactionByOrderID(orderID string) (*transaction.Transaction, error) {
	ret := _m.Called(orderID)

	var r0 *transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*transaction.Transaction, error)); ok {
		return rf(orderID)
	}
	if rf, ok := ret.Get(0).(func(string) *transaction.Transaction); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnsetTransactionIDs provides a mock function with given fields: transactionID
func (_m *Repository) UnsetTransactionIDs(transactionID int) (bool, error) {
	ret := _m.Called(transactionID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(transactionID)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(transactionID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *Repository) Update(_a0 transaction.Transaction) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(transaction.Transaction) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(transaction.Transaction) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBatchTransactionDetail provides a mock function with given fields: items, transactionID
func (_m *Repository) UpdateBatchTransactionDetail(items []dtos.FineItem, transactionID int) (bool, error) {
	ret := _m.Called(items, transactionID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func([]dtos.FineItem, int) (bool, error)); ok {
		return rf(items, transactionID)
	}
	if rf, ok := ret.Get(0).(func([]dtos.FineItem, int) bool); ok {
		r0 = rf(items, transactionID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]dtos.FineItem, int) error); ok {
		r1 = rf(items, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: transactionID, status
func (_m *Repository) UpdateStatus(transactionID int, status string) (bool, error) {
	ret := _m.Called(transactionID, status)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (bool, error)); ok {
		return rf(transactionID, status)
	}
	if rf, ok := ret.Get(0).(func(int, string) bool); ok {
		r0 = rf(transactionID, status)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(transactionID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
