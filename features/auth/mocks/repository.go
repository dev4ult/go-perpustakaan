// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	auth "perpustakaan/features/auth"
	member "perpustakaan/features/member"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// InsertNewLibrarian provides a mock function with given fields: newLibrarian
func (_m *Repository) InsertNewLibrarian(newLibrarian auth.Librarian) (*auth.Librarian, error) {
	ret := _m.Called(newLibrarian)

	var r0 *auth.Librarian
	var r1 error
	if rf, ok := ret.Get(0).(func(auth.Librarian) (*auth.Librarian, error)); ok {
		return rf(newLibrarian)
	}
	if rf, ok := ret.Get(0).(func(auth.Librarian) *auth.Librarian); ok {
		r0 = rf(newLibrarian)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Librarian)
		}
	}

	if rf, ok := ret.Get(1).(func(auth.Librarian) error); ok {
		r1 = rf(newLibrarian)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectLibrarianByStaffID provides a mock function with given fields: staffID
func (_m *Repository) SelectLibrarianByStaffID(staffID string) (*auth.Librarian, error) {
	ret := _m.Called(staffID)

	var r0 *auth.Librarian
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*auth.Librarian, error)); ok {
		return rf(staffID)
	}
	if rf, ok := ret.Get(0).(func(string) *auth.Librarian); ok {
		r0 = rf(staffID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Librarian)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(staffID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectMemberByCredentialNumber provides a mock function with given fields: credentialNumber
func (_m *Repository) SelectMemberByCredentialNumber(credentialNumber string) (*member.Member, error) {
	ret := _m.Called(credentialNumber)

	var r0 *member.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*member.Member, error)); ok {
		return rf(credentialNumber)
	}
	if rf, ok := ret.Get(0).(func(string) *member.Member); ok {
		r0 = rf(credentialNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(credentialNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
