// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	author "perpustakaan/features/author"
	dtos "perpustakaan/features/author/dtos"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteAuthorshipByID provides a mock function with given fields: authorshipID
func (_m *Repository) DeleteAuthorshipByID(authorshipID int) (int, error) {
	ret := _m.Called(authorshipID)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int, error)); ok {
		return rf(authorshipID)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(authorshipID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(authorshipID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: authorID
func (_m *Repository) DeleteByID(authorID int) (int, error) {
	ret := _m.Called(authorID)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int, error)); ok {
		return rf(authorID)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(authorID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: newAuthor
func (_m *Repository) Insert(newAuthor author.Author) (int, error) {
	ret := _m.Called(newAuthor)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(author.Author) (int, error)); ok {
		return rf(newAuthor)
	}
	if rf, ok := ret.Get(0).(func(author.Author) int); ok {
		r0 = rf(newAuthor)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(author.Author) error); ok {
		r1 = rf(newAuthor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAuthorship provides a mock function with given fields: authorship
func (_m *Repository) InsertAuthorship(authorship dtos.InputAuthorshipIDS) (*dtos.BookAuthors, error) {
	ret := _m.Called(authorship)

	var r0 *dtos.BookAuthors
	var r1 error
	if rf, ok := ret.Get(0).(func(dtos.InputAuthorshipIDS) (*dtos.BookAuthors, error)); ok {
		return rf(authorship)
	}
	if rf, ok := ret.Get(0).(func(dtos.InputAuthorshipIDS) *dtos.BookAuthors); ok {
		r0 = rf(authorship)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.BookAuthors)
		}
	}

	if rf, ok := ret.Get(1).(func(dtos.InputAuthorshipIDS) error); ok {
		r1 = rf(authorship)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAuthorshipExist provides a mock function with given fields: bookID, authorID
func (_m *Repository) IsAuthorshipExist(bookID int, authorID int) (bool, error) {
	ret := _m.Called(bookID, authorID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (bool, error)); ok {
		return rf(bookID, authorID)
	}
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(bookID, authorID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(bookID, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Paginate provides a mock function with given fields: page, size, searchKey
func (_m *Repository) Paginate(page int, size int, searchKey string) ([]author.Author, error) {
	ret := _m.Called(page, size, searchKey)

	var r0 []author.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]author.Author, error)); ok {
		return rf(page, size, searchKey)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []author.Author); ok {
		r0 = rf(page, size, searchKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]author.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(page, size, searchKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAuthorshipByID provides a mock function with given fields: authorshipID
func (_m *Repository) SelectAuthorshipByID(authorshipID int) (*author.Authorship, error) {
	ret := _m.Called(authorshipID)

	var r0 *author.Authorship
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*author.Authorship, error)); ok {
		return rf(authorshipID)
	}
	if rf, ok := ret.Get(0).(func(int) *author.Authorship); ok {
		r0 = rf(authorshipID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*author.Authorship)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(authorshipID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByID provides a mock function with given fields: authorID
func (_m *Repository) SelectByID(authorID int) (*author.Author, error) {
	ret := _m.Called(authorID)

	var r0 *author.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*author.Author, error)); ok {
		return rf(authorID)
	}
	if rf, ok := ret.Get(0).(func(int) *author.Author); ok {
		r0 = rf(authorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*author.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *Repository) Update(_a0 author.Author) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(author.Author) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(author.Author) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(author.Author) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
