// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	member "perpustakaan/features/member"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteByID provides a mock function with given fields: memberID
func (_m *Repository) DeleteByID(memberID int) (int, error) {
	ret := _m.Called(memberID)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int, error)); ok {
		return rf(memberID)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(memberID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(memberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: newMember
func (_m *Repository) Insert(newMember member.Member) (int, error) {
	ret := _m.Called(newMember)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(member.Member) (int, error)); ok {
		return rf(newMember)
	}
	if rf, ok := ret.Get(0).(func(member.Member) int); ok {
		r0 = rf(newMember)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(member.Member) error); ok {
		r1 = rf(newMember)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Paginate provides a mock function with given fields: page, size, email, credentialNumber
func (_m *Repository) Paginate(page int, size int, email string, credentialNumber string) ([]member.Member, error) {
	ret := _m.Called(page, size, email, credentialNumber)

	var r0 []member.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]member.Member, error)); ok {
		return rf(page, size, email, credentialNumber)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []member.Member); ok {
		r0 = rf(page, size, email, credentialNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]member.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) error); ok {
		r1 = rf(page, size, email, credentialNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByCredentialNumber provides a mock function with given fields: credentialNumber
func (_m *Repository) SelectByCredentialNumber(credentialNumber string) (*member.Member, error) {
	ret := _m.Called(credentialNumber)

	var r0 *member.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*member.Member, error)); ok {
		return rf(credentialNumber)
	}
	if rf, ok := ret.Get(0).(func(string) *member.Member); ok {
		r0 = rf(credentialNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(credentialNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByEmail provides a mock function with given fields: email
func (_m *Repository) SelectByEmail(email string) (*member.Member, error) {
	ret := _m.Called(email)

	var r0 *member.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*member.Member, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *member.Member); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByID provides a mock function with given fields: memberID
func (_m *Repository) SelectByID(memberID int) (*member.Member, error) {
	ret := _m.Called(memberID)

	var r0 *member.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*member.Member, error)); ok {
		return rf(memberID)
	}
	if rf, ok := ret.Get(0).(func(int) *member.Member); ok {
		r0 = rf(memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(memberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *Repository) Update(_a0 member.Member) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(member.Member) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(member.Member) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(member.Member) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
