// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	book "perpustakaan/features/book"
	dtos "perpustakaan/features/book/dtos"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteByID provides a mock function with given fields: bookID
func (_m *Repository) DeleteByID(bookID int) (int, error) {
	ret := _m.Called(bookID)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int, error)); ok {
		return rf(bookID)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(bookID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: newBook
func (_m *Repository) Insert(newBook book.Book) (int, error) {
	ret := _m.Called(newBook)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(book.Book) (int, error)); ok {
		return rf(newBook)
	}
	if rf, ok := ret.Get(0).(func(book.Book) int); ok {
		r0 = rf(newBook)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(book.Book) error); ok {
		r1 = rf(newBook)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Paginate provides a mock function with given fields: page, size, searchKey
func (_m *Repository) Paginate(page int, size int, searchKey string) ([]dtos.ResBook, error) {
	ret := _m.Called(page, size, searchKey)

	var r0 []dtos.ResBook
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]dtos.ResBook, error)); ok {
		return rf(page, size, searchKey)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []dtos.ResBook); ok {
		r0 = rf(page, size, searchKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.ResBook)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(page, size, searchKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByID provides a mock function with given fields: bookID
func (_m *Repository) SelectByID(bookID int) (*dtos.ResBook, error) {
	ret := _m.Called(bookID)

	var r0 *dtos.ResBook
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*dtos.ResBook, error)); ok {
		return rf(bookID)
	}
	if rf, ok := ret.Get(0).(func(int) *dtos.ResBook); ok {
		r0 = rf(bookID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ResBook)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *Repository) Update(_a0 book.Book) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(book.Book) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(book.Book) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(book.Book) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
